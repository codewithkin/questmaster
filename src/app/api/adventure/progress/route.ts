import { NextResponse } from "next/server";
import { generateCompletion } from "@/lib/ai/getCompletion"; // Import the helper function

export async function POST(req: Request) {
  try {
    const { choice } = await req.json();
    if (!choice) {
      return NextResponse.json(
        { error: "Invalid request. 'choice' is required." },
        { status: 400 }
      );
    }

    // Generate the next part of the story using the helper function
    const systemPrompt = `
      You are an advanced AI text-based adventure game generator.
      Your task is to generate immersive and engaging adventure stories.

      **Response Format:**
      - Respond **ONLY** with a valid JSON object (no extra text).
      - The JSON must contain:
        1. **"story"**: A well-written paragraph (or more) describing the next part of the adventure.
        2. **"choices"**: An array of 2-4 unique next actions.

      **Rules for Choices:**
      - Choices must logically follow the previous event.
      - Do not repeat past choices.
      - Avoid generic responses like "Do nothing."

      **Example JSON Output:**
      {
        "story": "You stand before an ancient temple, its entrance shrouded in mist. The sound of distant drums echoes through the jungle.",
        "choices": [
          "Step cautiously into the temple.",
          "Examine the strange markings on the wall.",
          "Turn back and look for another path."
        ]
      }

      **Final Instructions:**
      - Return only a valid JSON object.
      - Do not include markdown, comments, or extra text.
    `;

    const userPrompt = `The player chose: "${choice}". Continue the story.`;

    const responseText = await generateCompletion({
        systemPrompt,
        message: userPrompt
    });

    if(!responseText) throw new Error("No response generated by AI");

    // Parse and validate the AI's response
    let storyData;
    try {
      storyData = JSON.parse(responseText);
    } catch (error) {
      console.error("Error parsing AI response:", error);
      return NextResponse.json(
        { error: "Failed to parse AI response." },
        { status: 500 }
      );
    }

    if (!storyData.story || !storyData.choices) {
      return NextResponse.json(
        { error: "Invalid response format from AI." },
        { status: 500 }
      );
    }

    return NextResponse.json(storyData);
  } catch (error) {
    console.error("Error generating adventure progress:", error);
    return NextResponse.json(
      { error: "Failed to generate story progression." },
      { status: 500 }
    );
  }
}